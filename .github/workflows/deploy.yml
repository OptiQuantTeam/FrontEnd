name: AWS Lambda Build

on:
  push:
    branches:
      - master
      - develop

jobs:
  init-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Set version
        id: set-version
        run: |
          version=$(TZ='Asia/Seoul' date +'%Y%m%d')
          echo "version=${version}" >> $GITHUB_OUTPUT
      



  deploy:
    needs: init-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build
        env:
          REACT_APP_API_KEY: ${{ secrets.REACT_APP_API_KEY }}  # 필요한 환경 변수가 있다면 추가

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        run: aws s3 sync build/ s3://${{ secrets.AWS_S3_BUCKET_NAME }} --delete

      - name: Invalidate CloudFront Cache
        env:
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.AWS_CLOUDFRONT_ID }}
        if: env.CLOUDFRONT_DISTRIBUTION_ID != ''
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_ID }} --paths "/*"

  notify:
    needs: [init-version, deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Slack 알림 전송
        env:
          VERSION: ${{ needs.init-version.outputs.version }}
          ENV_TYPE: ${{ needs.init-version.outputs.env_type }}
        run: |
          
          # 결과 상태
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            COLOR="good"
            STATUS="성공"
          else
            COLOR="danger"
            STATUS="실패"
          fi

          curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"attachments\": [
              {
                \"color\": \"$COLOR\",
                \"title\": \"프론트엔드 배포 $STATUS\",
                \"fields\": [
                  {
                    \"title\": \"브랜치\",
                    \"value\": \"${{ github.ref }}\",
                    \"short\": true
                  },
                  {
                    \"title\": \"버전\",
                    \"value\": \"$VERSION\",
                    \"short\": true
                  }
                ]
              }
            ]
          }" ${{ secrets.SLACK_WEBHOOK_URL }}